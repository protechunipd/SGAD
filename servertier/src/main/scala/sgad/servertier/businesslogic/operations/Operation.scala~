/**
 * FILE: Operation.scala
 * PERCORSO /Codice/sgad/servertier/src/main/scala/sgad/servertier/businesslogic/operations
 * DATA CREAZIONE: 23 Febbraio 2014
 * AUTORE: ProTech
 * EMAIL: protech.unipd@gmail.com
 *
 * Questo file è proprietà del gruppo ProTech, viene rilasciato sotto licenza Apache v2.
 *
 * DIARIO DELLE MODIFICHE:
 * 2014-02-23 - Creazione della classe - Biancucci Maurizio
 * 2014-02-23 - Aggiunta implementazione decodeData - Segantin Fabio
 */
package sgad.servertier.businesslogic.operations

import sgad.servertier.dataaccess.data.userdata.UserData
import scala.collection.immutable.Map
import scala.util.matching.Regex
import scala.collection.mutable.ArrayBuffer

/**
 * Classe astratta per l'esecuzione di un'operazione.
 */
trait Operation {

	/**
	 * Decodifica i dati in input restituendo una mappa facile da utilizzare.
	 * @param data Stringa dei dati in input da decodificare
	 */
	protected def decodeData(data: String): Map[String, String] = {
		val replacedData = data.replaceAll("_", " ") //Il client manda _ al posto degli spazi, cosi li rimetto
		val pattern = new Regex("((\\{|,)*([^,:]+?)(:))([^,}]*)(\\})*")
		pattern.findAllIn(replacedData).matchData.map[(String, String)](
			m => {
				if (m.group(5).length > 0)
					(m.group(3), m.group(5))
				else
					(null, null)
			}
		).toMap
	}

	/**
	 * Metodo astratto che rappresenta l'esecuzione di un'operazione.
	 * @param userData dati dell'utente su cui verrà effettuata l'operazione.
	 * @param data dati accompagnatori alla richiesta dell'operazione.
	 * @param piggy rappresenta i valori in piggybacking da ritornare svuotandone l'array o da aggiungere per un successivo ritorno.
	 * @param loginAuthorization autorizzazione a operare richieste di login. Di default è false.
	 * @param registrationAuthorization autorizzazione a operare richieste di registrazione. Di default è false.
	 * @param userAuthorization autorizzazione a operare richieste di user. Di default è false.
	 * @param internalAuthorization autorizzazione a operare richieste interne. Di default è false.
	 */
	def execute(userData: UserData, data: String, piggy: ArrayBuffer[String], loginAuthorization: Boolean = false, registrationAuthorization: Boolean = false,
	            userAuthorization: Boolean = false, internalAuthorization: Boolean = false): String

	/**
	 * Meotodo utilizzato per fare il parsing dei messaggi PiggyBack per restituirli al client.
	 * @param piggy è il riferimento all'arraybuffer dei messaggi.
	 * @return messaggio finale.
	 */
	def parsePiggy(piggy: ArrayBuffer[String]) = {
		val ritorno = if (piggy.size > 0) piggy.mkString("[{", "},{", "}]")
		else "[]"
		piggy.trimEnd(piggy.size)
		ritorno
	}
}
